# Initialize a new Git repository
git init

# Clone an existing repository
git clone https://github.com/username/repository.git

# Check the status of the repository
git status

# Add files to the staging area
git add filename
git add .

# Commit changes to the repository
git commit -m "Commit message"

# View commit history
git log

# Create a new branch
git branch branch_name

# Switch to a different branch
git checkout branch_name

# Checkout a specific file from the repository
git checkout filename

# Merge a branch into the current branch
git merge branch_name

# Push changes to a remote repository
git push origin branch_name

# Pull changes from a remote repository
git pull origin branch_name

# View remote repositories
git remote -v

# Add a remote repository
git remote add origin https://github.com/username/repository.git

# Remove a remote repository
git remote remove origin

# Fetch changes from a remote repository
git fetch origin

# Stash changes
git stash

# Apply stashed changes
git stash apply

# Delete a branch
git branch -d branch_name

# Force delete a branch
git branch -D branch_name

# Rename a branch
git branch -m old_branch_name new_branch_name

# Show changes between commits, commit and working tree, etc
git diff

# Show changes between the working directory and the index
git diff --staged

# .gitignore file
# The .gitignore file specifies intentionally untracked files to ignore.
# Files already tracked by Git are not affected.
# Example of a .gitignore file:

# Ignore all .log files
*.log

# Ignore all files in the temp directory
temp/

# Ignore a specific file
secret.txt

# Ignore all .DS_Store files (common on macOS)
.DS_Store

# Ignore node_modules directory (common in Node.js projects)
node_modules/

# Ignore all files with a .env extension
*.env


